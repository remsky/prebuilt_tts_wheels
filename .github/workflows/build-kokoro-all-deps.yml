name: Build Kokoro Dependencies Per Language

on:
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: 'Version of Kokoro to build'
        required: true
        default: '0.3.0'
      language:
        description: 'Language to build (en, ja, zh, ko, fr, de, es, ru, pt, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - en
          - ja
          - zh
          - ko
          - fr
          - de
          - es
          - ru
          - pt
      gpu_support:
        description: 'Include GPU/CUDA support'
        required: true
        default: 'cpu'
        type: choice
        options:
          - cpu
          - gpu

# Add permissions needed for package uploads and releases
permissions:
  contents: write
  packages: write

jobs:
  build_amd64_deps:
    name: Build AMD64 Dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl git gnupg lsb-release wget cmake
          cmake --version
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          python -m pip install --upgrade pip setuptools wheel pip-tools maturin

      - name: Build all wheels and dependencies
        env:
          CMAKE_POLICY_VERSION_MINIMUM: 3.5
          LANGUAGE: ${{ github.event.inputs.language }}
          GPU_SUPPORT: ${{ github.event.inputs.gpu_support }}
        run: |
          mkdir -p wheelhouse
          
          # Configure PyTorch installation based on GPU/CPU choice
          # Set a specific PyTorch version to ensure consistency across architectures
          TORCH_VERSION="2.6.0"
          
          if [ "$GPU_SUPPORT" = "gpu" ]; then
            echo "Building with GPU support - including CUDA dependencies"
            # For GPU builds, use the default PyTorch with CUDA support
            pip install torch==${TORCH_VERSION} || { echo "ERROR: Failed to install PyTorch ${TORCH_VERSION} with GPU support"; exit 1; }
            TORCH_INDEX=""
          else
            echo "Building CPU-only version - using PyTorch CPU variant"
            # For CPU builds, explicitly use the CPU-only PyTorch variant
            pip install torch==${TORCH_VERSION} --extra-index-url https://download.pytorch.org/whl/cpu || { echo "ERROR: Failed to install PyTorch ${TORCH_VERSION} CPU variant"; exit 1; }
            TORCH_INDEX="--extra-index-url https://download.pytorch.org/whl/cpu"
          fi
          
          # Execute the appropriate PyTorch installation
          eval $TORCH_INSTALL_CMD
          
          # Verify currently installed PyTorch packages
          echo "Currently installed PyTorch packages:"
          pip list | grep -E 'torch|cuda|nvidia'
          
          # Build pyopenjtalk first to handle CMake policy issue
          pip wheel --wheel-dir wheelhouse pyopenjtalk==0.4.0 || echo "Pyopenjtalk wheel build failed, will try with full kokoro install"
          
          # Now collect all dependencies based on language selection
          # Using full dependency collection to ensure ALL supporting packages are included
          if [ "$LANGUAGE" = "all" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              echo "Collecting all dependencies for all languages with GPU support..."
              pip wheel --wheel-dir wheelhouse "kokoro[all]==${{ github.event.inputs.version }}"
            else
              echo "Collecting all dependencies for all languages with CPU-only PyTorch..."
              # First get torch CPU variant into the wheelhouse
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              # Then get all other dependencies
              pip wheel --wheel-dir wheelhouse "kokoro[all]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "en" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[en]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[en]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "ja" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[ja]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[ja]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "zh" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[zh]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[zh]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "ko" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[ko]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[ko]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "fr" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[fr]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[fr]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "de" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[de]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[de]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "es" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[es]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[es]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "ru" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[ru]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[ru]==${{ github.event.inputs.version }}"
            fi
          elif [ "$LANGUAGE" = "pt" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              pip wheel --wheel-dir wheelhouse "kokoro[pt]==${{ github.event.inputs.version }}"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
              pip wheel --wheel-dir wheelhouse "kokoro[pt]==${{ github.event.inputs.version }}"
            fi
          else
            echo "Unsupported language: $LANGUAGE" && exit 1
          fi
          
          # For CPU builds, remove any CUDA packages that might have slipped through
          if [ "$GPU_SUPPORT" = "cpu" ]; then
            echo "Final check: removing any CUDA-related wheels from the CPU build..."
            find wheelhouse -name "*cuda*" -delete
            find wheelhouse -name "*nvidia*" -delete
            find wheelhouse -name "*nccl*" -delete
          fi
          
          # List all wheels for debugging
          find wheelhouse -name "*.whl" | sort > wheelhouse/wheel_list.txt
          echo "All wheels built:"
          cat wheelhouse/wheel_list.txt
          echo "Total wheel count: $(cat wheelhouse/wheel_list.txt | wc -l)"

      - name: Upload AMD64 Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: kokoro-all-deps-amd64-py${{ matrix.python-version }}
          path: wheelhouse/*.whl

  build_arm64_deps:
    name: Build ARM64 Dependencies
    runs-on: ubuntu-22.04-arm  # Updated to use the new ARM64 runner label
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl git gnupg lsb-release wget cmake
          cmake --version
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          python -m pip install --upgrade pip setuptools wheel pip-tools maturin

      - name: Set environment variables
        run: |
          echo "Setting required environment variables"
          # This explicitly sets PACKAGE_VERSION in the GitHub environment
          echo "PACKAGE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Build all wheels and dependencies
        env:
          CMAKE_POLICY_VERSION_MINIMUM: 3.5
          LANGUAGE: ${{ github.event.inputs.language }}
          GPU_SUPPORT: ${{ github.event.inputs.gpu_support }}
        run: |
          mkdir -p wheelhouse
          
          # Set strict error handling to ensure we fail on errors
          set -e
          
          echo "===== Starting dependency build ====="
          echo "Platform: $(uname -m)"
          echo "Language: $LANGUAGE"
          echo "GPU Support: $GPU_SUPPORT"
          
          # Configure PyTorch installation based on GPU/CPU choice
          # Set a specific PyTorch version to ensure consistency across architectures
          TORCH_VERSION="2.6.0"
          
          if [ "$GPU_SUPPORT" = "gpu" ]; then
            echo "Building with GPU support - including CUDA dependencies"
            # For GPU builds, use the default PyTorch with CUDA support
            pip install torch==${TORCH_VERSION} || { echo "ERROR: Failed to install PyTorch ${TORCH_VERSION} with GPU support"; exit 1; }
            TORCH_INDEX=""
          else
            echo "Building CPU-only version - using PyTorch CPU variant"
            # For CPU builds, explicitly use the CPU-only PyTorch variant
            pip install torch==${TORCH_VERSION} --extra-index-url https://download.pytorch.org/whl/cpu || { echo "ERROR: Failed to install PyTorch ${TORCH_VERSION} CPU variant"; exit 1; }
            TORCH_INDEX="--extra-index-url https://download.pytorch.org/whl/cpu"
          fi
          
          # Verify currently installed PyTorch packages
          echo "Currently installed PyTorch packages:"
          pip list | grep -E 'torch|cuda|nvidia' || echo "No PyTorch packages found - this is unexpected"
          
          # Build pyopenjtalk first to handle CMake policy issue
          echo "Building pyopenjtalk..."
          pip wheel --wheel-dir wheelhouse pyopenjtalk==0.4.0 || { echo "ERROR: Failed to build pyopenjtalk"; exit 1; }
          
          # Create a function to handle dependency building with proper error checking
          build_dependencies() {
            local pkg="$1"
            local desc="$2"
            
            echo "Building $desc dependencies..."
            pip wheel --wheel-dir wheelhouse "$pkg" $TORCH_INDEX
            
            # Check if build was successful by counting wheels
            wheel_count=$(find wheelhouse -name "*.whl" | wc -l)
            echo "Found $wheel_count wheels after building $desc"
            
            if [ $wheel_count -lt 5 ]; then
              echo "ERROR: Too few wheels found after building $desc. Expected more than 5, found $wheel_count."
              echo "This suggests dependency building failed."
              exit 1
            fi
          }
          
          # Now collect all dependencies based on language selection with proper error handling
          if [ "$LANGUAGE" = "all" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ];then
              build_dependencies "kokoro[all]==${{ github.event.inputs.version }}" "all languages with GPU support"
            else
              # First get torch CPU variant into the wheelhouse
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[all]==${{ github.event.inputs.version }}" "all languages with CPU support"
            fi
          elif [ "$LANGUAGE" = "en" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[en]==${{ github.event.inputs.version }}" "English with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[en]==${{ github.event.inputs.version }}" "English with CPU support"
            fi
          # ...similar pattern for other languages...
          elif [ "$LANGUAGE" = "ja" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[ja]==${{ github.event.inputs.version }}" "Japanese with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[ja]==${{ github.event.inputs.version }}" "Japanese with CPU support"
            fi
          elif [ "$LANGUAGE" = "zh" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[zh]==${{ github.event.inputs.version }}" "Chinese with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[zh]==${{ github.event.inputs.version }}" "Chinese with CPU support"
            fi
          elif [ "$LANGUAGE" = "ko" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[ko]==${{ github.event.inputs.version }}" "Korean with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[ko]==${{ github.event.inputs.version }}" "Korean with CPU support"
            fi
          elif [ "$LANGUAGE" = "fr" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[fr]==${{ github.event.inputs.version }}" "French with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[fr]==${{ github.event.inputs.version }}" "French with CPU support"
            fi
          elif [ "$LANGUAGE" = "de" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[de]==${{ github.event.inputs.version }}" "German with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[de]==${{ github.event.inputs.version }}" "German with CPU support"
            fi
          elif [ "$LANGUAGE" = "es" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[es]==${{ github.event.inputs.version }}" "Spanish with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[es]==${{ github.event.inputs.version }}" "Spanish with CPU support"
            fi
          elif [ "$LANGUAGE" = "ru" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[ru]==${{ github.event.inputs.version }}" "Russian with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[ru]==${{ github.event.inputs.version }}" "Russian with CPU support"
            fi
          elif [ "$LANGUAGE" = "pt" ]; then
            if [ "$GPU_SUPPORT" = "gpu" ]; then
              build_dependencies "kokoro[pt]==${{ github.event.inputs.version }}" "Portuguese with GPU support"
            else
              pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX || { echo "ERROR: Failed to build PyTorch CPU wheel"; exit 1; }
              build_dependencies "kokoro[pt]==${{ github.event.inputs.version }}" "Portuguese with CPU support"
            fi
          else
            echo "Unsupported language: $LANGUAGE" && exit 1
          fi
          
          # For CPU builds, remove any CUDA packages that might have slipped through
          if [ "$GPU_SUPPORT" = "cpu" ]; then
            echo "Final check: removing any CUDA-related wheels from the CPU build..."
            find wheelhouse -name "*cuda*" -delete
            find wheelhouse -name "*nvidia*" -delete
            find wheelhouse -name "*nccl*" -delete
          fi
          
          # List all wheels and perform final checks with detailed size information
          find wheelhouse -name "*.whl" | sort > wheelhouse/wheel_list.txt
          
          # Detailed analysis of PyTorch wheel
          echo "===== PyTorch Wheel Analysis ====="
          torch_wheel=$(find wheelhouse -name "torch*.whl" | head -1)
          if [ -n "$torch_wheel" ]; then
            echo "PyTorch wheel found: $(basename $torch_wheel)"
            # Get size in MB
            torch_size_bytes=$(stat -c %s "$torch_wheel")
            torch_size_mb=$(echo "scale=2; $torch_size_bytes / 1048576" | bc)
            echo "PyTorch wheel size: $torch_size_mb MB ($torch_size_bytes bytes)"
            
            # Analyze wheel content
            echo "PyTorch wheel content analysis:"
            mkdir -p torch_extract
            unzip -q "$torch_wheel" -d torch_extract
            echo "Top-level directories in PyTorch wheel:"
            find torch_extract -maxdepth 1 -type d | sort
            
            # List largest files to identify what's taking up space
            echo "Largest files in PyTorch wheel:"
            find torch_extract -type f -exec du -h {} \; | sort -hr | head -10
            
            # Clean up
            rm -rf torch_extract
          else
            echo "No PyTorch wheel found!"
          fi
          
          # Get total size info
          echo "===== All Wheels Size Analysis ====="
          echo "All wheels with sizes (sorted by size):"
          find wheelhouse -name "*.whl" -exec du -h {} \; | sort -h
          
          # Get total size and count
          total_size_bytes=$(find wheelhouse -name "*.whl" -exec stat -c %s {} \; | awk '{s+=$1} END {print s}')
          total_size_mb=$(echo "scale=2; $total_size_bytes / 1048576" | bc)
          wheel_count=$(find wheelhouse -name "*.whl" | wc -l)
          echo "Total wheel count: $wheel_count"
          echo "Total wheels size: $total_size_mb MB ($total_size_bytes bytes)"
          echo "Platform: $(uname -m)"
          
          # Also get total size
          total_size=$(du -ch wheelhouse/*.whl | grep total | cut -f1)
          wheel_count=$(cat wheelhouse/wheel_list.txt | wc -l)
          echo "Total wheel count: $wheel_count"
          echo "Total wheels size: $total_size"
          echo "Platform: $(uname -m)"
          
          # Check specifically for torch wheel size
          torch_size=$(du -h wheelhouse/torch*.whl | cut -f1 || echo "No torch wheel found")
          echo "PyTorch wheel size: $torch_size"
          
          # Final validation - ensure we have a minimum number of wheels
          # For ARM64 builds, this might differ between platforms, but should be substantial
          if [ $wheel_count -lt 60 ]; then
            echo "ERROR: Too few wheels found after build. Expected at least 60, found $wheel_count."
            echo "This suggests the build process failed to collect all dependencies."
            exit 1
          fi
          
          # Verify that critical packages are present
          for critical_pkg in torch numpy transformers huggingface_hub loguru misaki kokoro
          do
            if ! grep -q "$critical_pkg" wheelhouse/wheel_list.txt; then
              echo "ERROR: Critical package '$critical_pkg' is missing from the built wheels!"
              exit 1
            fi
          done
          
          echo "===== Dependency build completed successfully ====="

      - name: Upload ARM64 Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: kokoro-all-deps-arm64-py${{ matrix.python-version }}
          path: wheelhouse/*.whl

  create_deps_release:
    name: Create Dependencies Release
    needs: [build_amd64_deps, build_arm64_deps]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For release creation
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: |
          find artifacts -type f -name "*.whl" | sort
          echo "Total wheel count: $(find artifacts -type f -name "*.whl" | wc -l)"

      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          cp -f artifacts/kokoro-all-deps-*/*.whl release_assets/ || true
          echo "--- Contents of release_assets ---"
          ls -la release_assets
          echo "Total wheel count: $(find release_assets -type f -name "*.whl" | wc -l)"
          echo "----------------------------------"

      - name: Create Release and Upload All Dependencies
        uses: softprops/action-gh-release@v2
        with:
          tag_name: kokoro-deps-v${{ github.event.inputs.version }}-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}
          name: Kokoro v${{ github.event.inputs.version }} Dependencies (${{ github.event.inputs.language }}, ${{ github.event.inputs.gpu_support }})
          files: release_assets/*.whl
          body: |
            # Kokoro Dependencies (${{ github.event.inputs.language }}, ${{ github.event.inputs.gpu_support }})

            This release contains dependencies required by Kokoro v${{ github.event.inputs.version }} for both ARM64 and AMD64 architectures.
            Language pack: ${{ github.event.inputs.language }}
            GPU Support: ${{ github.event.inputs.gpu_support }}
            
            These pre-built wheels make it easy to install Kokoro and all its dependencies in environments where compilation might be difficult or time-consuming.

            ## Usage in Dockerfile
            ```dockerfile
            # Download and install all pre-built wheels
            COPY --from=ghcr.io/remsky/prebuilt_tts_wheels/kokoro-deps:${{ github.event.inputs.version }}-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-py3.10 /wheelhouse /wheelhouse
            RUN pip install --no-index --find-links=/wheelhouse kokoro[${{ github.event.inputs.language }}]==${{ github.event.inputs.version }}
            ```
          make_latest: ${{ github.event.inputs.language == 'all' && github.event.inputs.gpu_support == 'gpu' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_push_container:
    name: Push Dependencies Container
    needs: [build_amd64_deps, build_arm64_deps]
    runs-on: ubuntu-latest
    permissions:
      packages: write  # For pushing to GHCR
    strategy:
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare AMD64 and ARM64 wheel directories for Docker build
        run: |
          # Create the directories expected by the Dockerfile
          mkdir -p wheelhouse-amd64-py${{ matrix.python-version }}
          mkdir -p wheelhouse-arm64-py${{ matrix.python-version }}
          
          # Copy AMD64 wheels
          if [ -d "artifacts/kokoro-all-deps-amd64-py${{ matrix.python-version }}" ]; then
            cp -f artifacts/kokoro-all-deps-amd64-py${{ matrix.python-version }}/*.whl wheelhouse-amd64-py${{ matrix.python-version }}/ || echo "No AMD64 wheels found"
            echo "AMD64 wheels count: $(find wheelhouse-amd64-py${{ matrix.python-version }} -name "*.whl" | wc -l)"
          else
            echo "WARNING: AMD64 artifact directory not found"
          fi
          
          # Copy ARM64 wheels
          if [ -d "artifacts/kokoro-all-deps-arm64-py${{ matrix.python-version }}" ]; then
            cp -f artifacts/kokoro-all-deps-arm64-py${{ matrix.python-version }}/*.whl wheelhouse-arm64-py${{ matrix.python-version }}/ || echo "No ARM64 wheels found"
            echo "ARM64 wheels count: $(find wheelhouse-arm64-py${{ matrix.python-version }} -name "*.whl" | wc -l)"
          else
            echo "WARNING: ARM64 artifact directory not found"
          fi
          
          # List the directory structure
          echo "Directory structure for Docker build:"
          find wheelhouse-* -type f | wc -l

      - name: Prepare AMD64 wheels directory
        id: amd64-wheels
        run: |
          AMD64_COUNT=$(find wheelhouse-amd64-py${{ matrix.python-version }} -type f -name "*.whl" | wc -l)
          echo "count=${AMD64_COUNT}" >> $GITHUB_OUTPUT
          if [ "${AMD64_COUNT}" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "::notice title=AMD64 Wheels::Found ${AMD64_COUNT} wheels for Python ${{ matrix.python-version }}"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "::warning title=AMD64 Wheels::No wheels found for Python ${{ matrix.python-version }}"
          fi

      - name: Prepare ARM64 wheels directory
        id: arm64-wheels
        run: |
          ARM64_COUNT=$(find wheelhouse-arm64-py${{ matrix.python-version }} -type f -name "*.whl" | wc -l)
          echo "count=${ARM64_COUNT}" >> $GITHUB_OUTPUT
          if [ "${ARM64_COUNT}" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "::notice title=ARM64 Wheels::Found ${ARM64_COUNT} wheels for Python ${{ matrix.python-version }}"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "::warning title=ARM64 Wheels::No wheels found for Python ${{ matrix.python-version }}"
          fi

      - name: Set up QEMU # Add QEMU setup
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx # Add Buildx setup
        uses: docker/setup-buildx-action@v3
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_PACKAGES }}  # Use PAT instead of GITHUB_TOKEN

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: kokoro-image/kokoro-deps-multiarch.Dockerfile # Use the kokoro multiarch Dockerfile
          platforms: linux/amd64,linux/arm64 # Build both platforms
          push: true
          tags: ghcr.io/remsky/prebuilt_tts_wheels/kokoro-deps:${{ github.event.inputs.version }}-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-py${{ matrix.python-version }} # Push the final tag
          build-args: | # Pass Python version to Dockerfile
            PYTHON_VERSION=${{ matrix.python-version }}
          cache-from: type=gha # Enable GHA cache read
          cache-to: type=gha,mode=max # Enable GHA cache write
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Pre-built wheels for Kokoro TTS (${{ github.event.inputs.language }}, ${{ github.event.inputs.gpu_support }})
            org.opencontainers.image.licenses=MIT