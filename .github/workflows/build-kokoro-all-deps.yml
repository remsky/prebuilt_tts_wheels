name: Build Kokoro Dependencies Per Language

on:
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: 'Version of Kokoro to build'
        required: true
        default: '0.9.4'
      language:
        description: 'Language to build (en, ja, zh, ko, vi, he, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - en
          - ja
          - zh
          - ko
          - vi
          - he
      gpu_support:
        description: 'Include GPU/CUDA support'
        required: true
        default: 'cpu'
        type: choice
        options:
          - cpu
          - gpu

# Add permissions needed for package uploads and releases
permissions:
  contents: write
  packages: write

jobs:
  build_amd64_deps:
    name: Build AMD64 Dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl git gnupg lsb-release wget cmake
          cmake --version
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          python -m pip install --upgrade pip setuptools wheel pip-tools maturin

      - name: Build all wheels and dependencies
        env:
          CMAKE_POLICY_VERSION_MINIMUM: 3.5
          LANGUAGE: ${{ github.event.inputs.language }}
          GPU_SUPPORT: ${{ github.event.inputs.gpu_support }}
        run: |
          # Source cargo env to ensure maturin path is set
          source $HOME/.cargo/env
          
          # Enable strict error handling - ANY failed command will abort the script
          set -e
          
          mkdir -p wheelhouse
          
          # Configure PyTorch installation based on GPU/CPU choice
          if [ "$GPU_SUPPORT" = "gpu" ]; then
            echo "Building with GPU support"
            TORCH_INDEX=""
          else
            echo "Building CPU-only version"
            TORCH_INDEX="--extra-index-url https://download.pytorch.org/whl/cpu"
          fi
          
          echo "Building dependencies for language: $LANGUAGE"
          
          # Special handling for when we want all languages
          if [ "$LANGUAGE" = "all" ]; then
            echo "Building with ALL language support - explicitly installing all language variants of misaki"
            # First build the PyTorch wheel (required first)
            pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
            
            # Explicitly pre-wheel known complex/native language dependencies first
            echo "Pre-wheeling language-specific dependencies..."
            # Use --no-build-isolation for Rust dependency to ensure maturin is found
            pip wheel --no-build-isolation --wheel-dir wheelhouse underthesea # Vietnamese (Rust)
            pip wheel --wheel-dir wheelhouse mojimoji    # Japanese (C Extension)
            pip wheel --wheel-dir wheelhouse fugashi==1.3.0     # Japanese
            pip wheel --wheel-dir wheelhouse jieba       # Chinese
            pip wheel --wheel-dir wheelhouse jamo        # Korean
            # Let misaki/kokoro resolve pyopenjtalk version
            
            # Now wheel misaki with all extras
            echo "Wheeling misaki with all extras..."
            pip wheel --wheel-dir wheelhouse "misaki[en,ja,zh,ko,vi,he]>=0.9.4"
            
            # Now build Kokoro with the all option
            echo "Wheeling kokoro with all extras..."
            pip wheel --wheel-dir wheelhouse "kokoro[$LANGUAGE]==${{ github.event.inputs.version }}"
          else
            # For individual language support
            # Build pyopenjtalk first if building Japanese support (Let pip resolve version)
            if [ "$LANGUAGE" = "ja" ]; then
              echo "Building pyopenjtalk..."
              pip wheel --wheel-dir wheelhouse pyopenjtalk==0.4.0
            fi
            
            # Build all wheels we need
            pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
            
            # First build misaki with the selected language to ensure we have all language deps
            pip wheel --wheel-dir wheelhouse "misaki[$LANGUAGE]>=0.9.4"
            
            # Then build Kokoro which will use those deps
            pip wheel --wheel-dir wheelhouse "kokoro[$LANGUAGE]==${{ github.event.inputs.version }}"
          fi
          
          # Download unidic dictionary if building Japanese support
          if [ "$LANGUAGE" = "all" ] || [ "$LANGUAGE" = "ja" ]; then
            echo "Downloading unidic dictionary..."
            # Create a temporary venv to download unidic
            python3 -m venv /tmp/unidic-venv
            source /tmp/unidic-venv/bin/activate
            # Install unidic from the built wheels
            pip install --no-index --find-links=wheelhouse unidic
            # Download the dictionary data
            python -m unidic download
            # Copy the downloaded unidic data into the wheelhouse artifact
            echo "Copying unidic data to wheelhouse/unidic_data..."
            mkdir -p wheelhouse/unidic_data
            # Copy from the actual download location inside the venv
            cp -r /tmp/unidic-venv/lib/python3.10/site-packages/unidic/dicdir/* wheelhouse/unidic_data/
            deactivate
            rm -rf /tmp/unidic-venv
            echo "Unidic dictionary downloaded and copied."
          fi
          
          # For CPU builds, remove any CUDA packages
          if [ "$GPU_SUPPORT" = "cpu" ]; then
            echo "Removing any CUDA-related wheels from CPU build..."
            find wheelhouse -name "*cuda*" -delete
            find wheelhouse -name "*nvidia*" -delete
            find wheelhouse -name "*nccl*" -delete
          fi
          
          # Final validation to ensure we have language-specific dependencies
          echo "Validating language dependencies..."
          if [ "$LANGUAGE" = "all" ] || [ "$LANGUAGE" = "ja" ]; then
            # For Japanese, we should have mojimoji, fugashi, etc.
            if ! find wheelhouse -name "mojimoji*" | grep -q .; then
              echo "ERROR: Japanese support requested but mojimoji not found in wheels!"
              exit 1
            fi
            if ! find wheelhouse -name "fugashi*" | grep -q .; then
              echo "ERROR: Japanese support requested but fugashi not found in wheels!"
              exit 1
            fi
          fi
          
          if [ "$LANGUAGE" = "all" ] || [ "$LANGUAGE" = "zh" ]; then
            # For Chinese, we should have jieba, etc.
            if ! find wheelhouse -name "jieba*" | grep -q .; then
              echo "ERROR: Chinese support requested but jieba not found in wheels!"
              exit 1
            fi
          fi
          
          if [ "$LANGUAGE" = "all" ] || [ "$LANGUAGE" = "ko" ]; then
            # For Korean, we should have jamo, etc.
            if ! find wheelhouse -name "jamo*" | grep -q .; then
              echo "ERROR: Korean support requested but jamo not found in wheels!"
              exit 1
            fi
          fi
          
          # List all wheels
          find wheelhouse -name "*.whl" | sort > wheelhouse/wheel_list.txt
          echo "All wheels built:"
          cat wheelhouse/wheel_list.txt
          echo "Total wheel count: $(cat wheelhouse/wheel_list.txt | wc -l)"

      - name: Upload AMD64 Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-amd64-py${{ matrix.python-version }}
          path: |
            wheelhouse/*.whl
            wheelhouse/unidic_data/

  build_arm64_deps:
    name: Build ARM64 Dependencies
    runs-on: ubuntu-22.04-arm  # Updated to use the new ARM64 runner label
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl git gnupg lsb-release wget cmake
          cmake --version
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          python -m pip install --upgrade pip setuptools wheel pip-tools maturin

      - name: Set environment variables
        run: |
          echo "Setting required environment variables"
          # This explicitly sets PACKAGE_VERSION in the GitHub environment
          echo "PACKAGE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Build all wheels and dependencies
        env:
          CMAKE_POLICY_VERSION_MINIMUM: 3.5
          LANGUAGE: ${{ github.event.inputs.language }}
          GPU_SUPPORT: ${{ github.event.inputs.gpu_support }}
        run: |
          # Source cargo env to ensure maturin path is set
          source $HOME/.cargo/env
          
          # Enable strict error handling - ANY failed command will abort the script
          set -e
          
          mkdir -p wheelhouse
          
          # Configure PyTorch installation based on GPU/CPU choice
          if [ "$GPU_SUPPORT" = "gpu" ]; then
            echo "Building with GPU support"
            TORCH_INDEX=""
          else
            echo "Building CPU-only version"
            TORCH_INDEX="--extra-index-url https://download.pytorch.org/whl/cpu"
          fi
          
          echo "Building dependencies for language: $LANGUAGE"
          
          # Special handling for when we want all languages
          if [ "$LANGUAGE" = "all" ]; then
            echo "Building with ALL language support - explicitly installing all language variants of misaki"
            # First build the PyTorch wheel (required first)
            pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
            
            # Explicitly pre-wheel known complex/native language dependencies first
            echo "Pre-wheeling language-specific dependencies..."
            # Use --no-build-isolation for Rust dependency to ensure maturin is found
            pip wheel --no-build-isolation --wheel-dir wheelhouse underthesea # Vietnamese (Rust)
            pip wheel --wheel-dir wheelhouse mojimoji    # Japanese (C Extension)
            pip wheel --wheel-dir wheelhouse fugashi==1.3.0     # Japanese
            pip wheel --wheel-dir wheelhouse jieba       # Chinese
            pip wheel --wheel-dir wheelhouse jamo        # Korean
            # Let misaki/kokoro resolve pyopenjtalk version
            
            # Now wheel misaki with all extras
            echo "Wheeling misaki with all extras..."
            pip wheel --wheel-dir wheelhouse "misaki[en,ja,zh,ko,vi,he]>=0.9.4"
            
            # Now build Kokoro with the all option
            echo "Wheeling kokoro with all extras..."
            pip wheel --wheel-dir wheelhouse "kokoro[$LANGUAGE]==${{ github.event.inputs.version }}"
          else
            # For individual language support
            # Build pyopenjtalk first if building Japanese support (Let pip resolve version)
            if [ "$LANGUAGE" = "ja" ]; then
              echo "Building pyopenjtalk..."
              pip wheel --wheel-dir wheelhouse pyopenjtalk==0.4.0
            fi
            
            # Build all wheels we need
            pip wheel --wheel-dir wheelhouse torch $TORCH_INDEX
            
            # First build misaki with the selected language to ensure we have all language deps
            pip wheel --wheel-dir wheelhouse "misaki[$LANGUAGE]>=0.9.4"
            
            # Then build Kokoro which will use those deps
            pip wheel --wheel-dir wheelhouse "kokoro[$LANGUAGE]==${{ github.event.inputs.version }}"
          fi
          
          # Download unidic dictionary if building Japanese support
          if [ "$LANGUAGE" = "all" ] || [ "$LANGUAGE" = "ja" ]; then
            echo "Downloading unidic dictionary..."
            # Create a temporary venv to download unidic
            python3 -m venv /tmp/unidic-venv
            source /tmp/unidic-venv/bin/activate
            # Install unidic from the built wheels
            pip install --no-index --find-links=wheelhouse unidic
            # Download the dictionary data
            python -m unidic download
            # Copy the downloaded unidic data into the wheelhouse artifact
            echo "Copying unidic data to wheelhouse/unidic_data..."
            mkdir -p wheelhouse/unidic_data
            # Copy from the actual download location inside the venv
            cp -r /tmp/unidic-venv/lib/python3.10/site-packages/unidic/dicdir/* wheelhouse/unidic_data/
            deactivate
            rm -rf /tmp/unidic-venv
            echo "Unidic dictionary downloaded and copied."
          fi
          
          # For CPU builds, remove any CUDA packages
          if [ "$GPU_SUPPORT" = "cpu" ]; then
            echo "Removing any CUDA-related wheels from CPU build..."
            find wheelhouse -name "*cuda*" -delete
            find wheelhouse -name "*nvidia*" -delete
            find wheelhouse -name "*nccl*" -delete
          fi
          
          # Final validation to ensure we have language-specific dependencies
          echo "Validating language dependencies..."
          if [ "$LANGUAGE" = "all" ] || [ "$LANGUAGE" = "ja" ]; then
            # For Japanese, we should have mojimoji, fugashi, etc.
            if ! find wheelhouse -name "mojimoji*" | grep -q .; then
              echo "ERROR: Japanese support requested but mojimoji not found in wheels!"
              exit 1
            fi
            if ! find wheelhouse -name "fugashi*" | grep -q .; then
              echo "ERROR: Japanese support requested but fugashi not found in wheels!"
              exit 1
            fi
          fi
          
          if [ "$LANGUAGE" = "all" ] || [ "$LANGUAGE" = "zh" ]; then
            # For Chinese, we should have jieba, etc.
            if ! find wheelhouse -name "jieba*" | grep -q .; then
              echo "ERROR: Chinese support requested but jieba not found in wheels!"
              exit 1
            fi
          fi
          
          if [ "$LANGUAGE" = "all" ] || [ "$LANGUAGE" = "ko" ]; then
            # For Korean, we should have jamo, etc.
            if ! find wheelhouse -name "jamo*" | grep -q .; then
              echo "ERROR: Korean support requested but jamo not found in wheels!"
              exit 1
            fi
          fi
          
          # List all wheels
          find wheelhouse -name "*.whl" | sort > wheelhouse/wheel_list.txt
          echo "All wheels built:"
          cat wheelhouse/wheel_list.txt
          echo "Total wheel count: $(cat wheelhouse/wheel_list.txt | wc -l)"

      - name: Upload ARM64 Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-arm64-py${{ matrix.python-version }}
          path: |
            wheelhouse/*.whl
            wheelhouse/unidic_data/

  create_deps_release:
    name: Create Dependencies Release
    needs: [build_amd64_deps, build_arm64_deps]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For release creation
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: |
          find artifacts -type f -name "*.whl" | sort
          echo "Total wheel count: $(find artifacts -type f -name "*.whl" | wc -l)"

      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          # Copy wheels from artifacts using the new naming convention
          cp -f artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-*/*.whl release_assets/ || true
          echo "--- Contents of release_assets ---"
          ls -la release_assets
          echo "Total wheel count: $(find release_assets -type f -name "*.whl" | wc -l)"
          echo "----------------------------------"

      - name: Create Release and Upload All Dependencies
        uses: softprops/action-gh-release@v2
        with:
          tag_name: kokoro-deps-v${{ github.event.inputs.version }}-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}
          name: Kokoro v${{ github.event.inputs.version }} Dependencies (${{ github.event.inputs.language }}, ${{ github.event.inputs.gpu_support }})
          files: release_assets/*.whl
          body: |
            # Kokoro Dependencies (${{ github.event.inputs.language }}, ${{ github.event.inputs.gpu_support }})

            This release contains dependencies required by Kokoro v${{ github.event.inputs.version }} for both ARM64 and AMD64 architectures.
            Language pack: ${{ github.event.inputs.language }}
            GPU Support: ${{ github.event.inputs.gpu_support }}
            
            These pre-built wheels make it easy to install Kokoro and all its dependencies in environments where compilation might be difficult or time-consuming.

            ## Usage in Dockerfile
            ```dockerfile
            # Download and install all pre-built wheels
            COPY --from=ghcr.io/remsky/prebuilt_tts_wheels/kokoro-deps:${{ github.event.inputs.version }}-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-py3.10 /wheelhouse /wheelhouse
            RUN pip install --no-index --find-links=/wheelhouse kokoro[${{ github.event.inputs.language }}]==${{ github.event.inputs.version }}
            ```
          make_latest: ${{ github.event.inputs.language == 'all' && github.event.inputs.gpu_support == 'gpu' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_push_container:
    name: Push Dependencies Container
    needs: [build_amd64_deps, build_arm64_deps]
    runs-on: ubuntu-latest
    permissions:
      packages: write  # For pushing to GHCR
    strategy:
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare AMD64 and ARM64 wheel directories for Docker build
        run: |
          # Create the directories expected by the Dockerfile
          mkdir -p wheelhouse-amd64-py${{ matrix.python-version }}
          mkdir -p wheelhouse-arm64-py${{ matrix.python-version }}
          mkdir -p wheelhouse-common/unidic_data
          
          # Copy AMD64 wheels using the new naming convention
          if [ -d "artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-amd64-py${{ matrix.python-version }}" ]; then
            cp -f artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-amd64-py${{ matrix.python-version }}/*.whl wheelhouse-amd64-py${{ matrix.python-version }}/ || echo "No AMD64 wheels found"
            echo "AMD64 wheels count: $(find wheelhouse-amd64-py${{ matrix.python-version }} -name "*.whl" | wc -l)"
            
            # Check for unidic_data in AMD64 artifacts and copy to common directory
            if [ -d "artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-amd64-py${{ matrix.python-version }}/unidic_data" ]; then
              echo "Found unidic_data in AMD64 artifacts, copying to common directory"
              cp -rf artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-amd64-py${{ matrix.python-version }}/unidic_data/* wheelhouse-common/unidic_data/
            fi
          else
            echo "WARNING: AMD64 artifact directory not found"
          fi
          
          # Copy ARM64 wheels using the new naming convention
          if [ -d "artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-arm64-py${{ matrix.python-version }}" ]; then
            cp -f artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-arm64-py${{ matrix.python-version }}/*.whl wheelhouse-arm64-py${{ matrix.python-version }}/ || echo "No ARM64 wheels found"
            echo "ARM64 wheels count: $(find wheelhouse-arm64-py${{ matrix.python-version }} -name "*.whl" | wc -l)"
            
            # Check for unidic_data in ARM64 artifacts and copy to common directory if not already copied
            if [ -d "artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-arm64-py${{ matrix.python-version }}/unidic_data" ] && [ ! "$(ls -A wheelhouse-common/unidic_data)" ]; then
              echo "Found unidic_data in ARM64 artifacts, copying to common directory"
              cp -rf artifacts/kokoro-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-arm64-py${{ matrix.python-version }}/unidic_data/* wheelhouse-common/unidic_data/
            fi
          else
            echo "WARNING: ARM64 artifact directory not found"
          fi
          
          # Create placeholder if unidic_data is still empty (for non-Japanese builds)
          if [ ! "$(ls -A wheelhouse-common/unidic_data)" ]; then
            echo "Creating placeholder file in unidic_data directory"
            echo "This is a placeholder file. The actual unidic dictionary data is only included in Japanese language builds." > wheelhouse-common/unidic_data/README.txt
          fi

      - name: Prepare AMD64 wheels directory
        id: amd64-wheels
        run: |
          AMD64_COUNT=$(find wheelhouse-amd64-py${{ matrix.python-version }} -type f -name "*.whl" | wc -l)
          echo "count=${AMD64_COUNT}" >> $GITHUB_OUTPUT
          if [ "${AMD64_COUNT}" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "::notice title=AMD64 Wheels::Found ${AMD64_COUNT} wheels for Python ${{ matrix.python-version }}"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "::warning title=AMD64 Wheels::No wheels found for Python ${{ matrix.python-version }}"
          fi

      - name: Prepare ARM64 wheels directory
        id: arm64-wheels
        run: |
          ARM64_COUNT=$(find wheelhouse-arm64-py${{ matrix.python-version }} -type f -name "*.whl" | wc -l)
          echo "count=${ARM64_COUNT}" >> $GITHUB_OUTPUT
          if [ "${ARM64_COUNT}" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "::notice title=ARM64 Wheels::Found ${ARM64_COUNT} wheels for Python ${{ matrix.python-version }}"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "::warning title=ARM64 Wheels::No wheels found for Python ${{ matrix.python-version }}"
          fi

      - name: Set up QEMU # Add QEMU setup
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx # Add Buildx setup
        uses: docker/setup-buildx-action@v3
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_PACKAGES }}  # Use PAT instead of GITHUB_TOKEN

      - name: Set dynamic image labels
        id: image-labels
        run: |
          # Set comprehensive dynamic description based on inputs
          PLATFORM_DESC="AMD64+ARM64"
          if [ "${{ github.event.inputs.gpu_support }}" == "gpu" ]; then
            SUPPORT_DESC="with CUDA support"
          else
            SUPPORT_DESC="CPU only"
          fi
          
          # Use correct language description based on actual Misaki supported languages
          if [ "${{ github.event.inputs.language }}" == "all" ]; then
            LANG_DESC="all languages (en, ja, zh, ko, vi, he)"
          else
            LANG_DESC="${{ github.event.inputs.language }} language"
          fi
          
          # Create the full description
          FULL_DESC="Pre-built wheels for Kokoro TTS v${{ github.event.inputs.version }} ($LANG_DESC, $SUPPORT_DESC) for $PLATFORM_DESC architectures"
          
          # Set as output for use in the next step
          echo "description=${FULL_DESC}" >> $GITHUB_OUTPUT

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: kokoro-image/kokoro-deps-multiarch.Dockerfile # Use the kokoro multiarch Dockerfile
          platforms: linux/amd64,linux/arm64 # Build both platforms
          push: true
          tags: ghcr.io/remsky/prebuilt_tts_wheels/kokoro-deps:${{ github.event.inputs.version }}-${{ github.event.inputs.language }}-${{ github.event.inputs.gpu_support }}-py${{ matrix.python-version }} # Push the final tag
          build-args: | # Pass Python version to Dockerfile
            PYTHON_VERSION=${{ matrix.python-version }}
          cache-from: type=gha # Enable GHA cache read
          cache-to: type=gha,mode=max # Enable GHA cache write
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=${{ steps.image-labels.outputs.description }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ github.event.inputs.version }}
            org.opencontainers.image.created=${{ github.event.created_at }}
            org.label-schema.schema-version=1.0
            org.label-schema.name=kokoro-deps
            org.label-schema.version=${{ github.event.inputs.version }}
            org.label-schema.language=${{ github.event.inputs.language }}
            org.label-schema.gpu-support=${{ github.event.inputs.gpu_support }}
            org.label-schema.python-version=${{ matrix.python-version }}
            io.github.remsky.architectures=amd64,arm64
