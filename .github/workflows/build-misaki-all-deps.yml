name: Build All Misaki Dependencies

on:
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: 'Version of Misaki to build'
        required: true
        default: '0.9.4'

# Add permissions needed to create releases
permissions:
  contents: write

jobs:
  build_amd64_deps:
    name: Build AMD64 Dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl git gnupg lsb-release wget cmake
          cmake --version
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          python -m pip install --upgrade pip setuptools wheel pip-tools maturin

      - name: Build all wheels and dependencies
        env:
          CMAKE_POLICY_VERSION_MINIMUM: 3.5
        run: |
          mkdir -p wheelhouse
          # Build pyopenjtalk first to handle CMake policy issue
          pip wheel --wheel-dir wheelhouse pyopenjtalk==0.4.0 || echo "Pyopenjtalk wheel build failed, will try with full misaki install"
          # Build underthesea-core with maturin explicitly
          pip wheel --wheel-dir wheelhouse underthesea-core==1.0.4 || echo "underthesea-core wheel build failed, will try with full misaki install"
          # Download and build misaki with all its dependencies
          pip wheel --wheel-dir wheelhouse "misaki[en,ja,ko,zh,vi]==${{ github.event.inputs.version }}"
          # List all wheels for debugging
          find wheelhouse -name "*.whl" | sort > wheelhouse/wheel_list.txt
          echo "All wheels built:"
          cat wheelhouse/wheel_list.txt
          echo "Total wheel count: $(cat wheelhouse/wheel_list.txt | wc -l)"

      - name: Upload AMD64 Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: misaki-all-deps-amd64-py${{ matrix.python-version }}
          path: wheelhouse/*.whl

  build_arm64_deps:
    name: Build ARM64 Dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ARM64 dependencies in Docker
        run: |
          mkdir -p wheelhouse
          docker buildx build --platform linux/arm64 \
            --build-arg PYTHON_VERSION=${{ matrix.python-version }} \
            --build-arg PACKAGE_VERSION=${{ github.event.inputs.version }} \
            -f .github/workflows/misaki-deps.Dockerfile \
            --load \
            -t misaki-deps-builder .
          docker run --rm \
            -v $(pwd)/wheelhouse:/wheelhouse \
            -e PACKAGE_VERSION=${{ github.event.inputs.version }} \
            misaki-deps-builder

      - name: Upload ARM64 Dependencies
        uses: actions/upload-artifact@v4
        with:
          name: misaki-all-deps-arm64-py${{ matrix.python-version }}
          path: wheelhouse/*.whl

  create_deps_release:
    name: Create Dependencies Release
    needs: [build_amd64_deps, build_arm64_deps]
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: |
          find artifacts -type f -name "*.whl" | sort
          echo "Total wheel count: $(find artifacts -type f -name "*.whl" | wc -l)"

      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          cp -f artifacts/misaki-all-deps-*/*.whl release_assets/ || true
          echo "--- Contents of release_assets ---"
          ls -la release_assets
          echo "Total wheel count: $(find release_assets -type f -name "*.whl" | wc -l)"
          echo "----------------------------------"

      - name: Create Release and Upload All Dependencies
        uses: softprops/action-gh-release@v2
        with:
          tag_name: misaki-deps-v${{ github.event.inputs.version }}
          name: Misaki v${{ github.event.inputs.version }} All Dependencies
          files: release_assets/*.whl
          body: |
            # Misaki Dependencies

            This release contains all dependencies required by Misaki v${{ github.event.inputs.version }} for both ARM64 and AMD64 architectures.
            
            These pre-built wheels make it easy to install Misaki and all its dependencies in environments where compilation might be difficult or time-consuming.

            ## Usage in Dockerfile
            ```dockerfile
            # Download and install all pre-built wheels
            COPY --from=ghcr.io/your-org/misaki-deps:${{ github.event.inputs.version }} /wheelhouse /wheelhouse
            RUN pip install --no-index --find-links=/wheelhouse misaki[en,ja,ko,zh,vi]==${{ github.event.inputs.version }}
            ```
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_push_container:
    name: Push Dependencies Container
    needs: [build_amd64_deps, build_arm64_deps]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]  # Only build for Python 3.10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare AMD64 wheels directory
        id: amd64-wheels
        run: |
          mkdir -p wheelhouse-amd64-py${{ matrix.python-version }}
          cp -f artifacts/misaki-all-deps-amd64-py${{ matrix.python-version }}/*.whl wheelhouse-amd64-py${{ matrix.python-version }}/ || true
          AMD64_COUNT=$(find wheelhouse-amd64-py${{ matrix.python-version }} -type f -name "*.whl" | wc -l)
          echo "count=${AMD64_COUNT}" >> $GITHUB_OUTPUT
          echo "::notice title=AMD64 Wheels::Found ${AMD64_COUNT} wheels for Python ${{ matrix.python-version }}"
          
      - name: Prepare ARM64 wheels directory
        id: arm64-wheels
        run: |
          mkdir -p wheelhouse-arm64-py${{ matrix.python-version }}
          cp -f artifacts/misaki-all-deps-arm64-py${{ matrix.python-version }}/*.whl wheelhouse-arm64-py${{ matrix.python-version }}/ || true
          ARM64_COUNT=$(find wheelhouse-arm64-py${{ matrix.python-version }} -type f -name "*.whl" | wc -l)
          echo "count=${ARM64_COUNT}" >> $GITHUB_OUTPUT
          if [ "${ARM64_COUNT}" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "::notice title=ARM64 Wheels::Found ${ARM64_COUNT} wheels for Python ${{ matrix.python-version }}"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "::warning title=ARM64 Wheels::No wheels found for Python ${{ matrix.python-version }}"
          fi
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate Dockerfiles
        run: |
          cat > Dockerfile.amd64 << EOL
          FROM scratch
          COPY wheelhouse-amd64-py${{ matrix.python-version }} /wheelhouse
          EOL
          
          cat > Dockerfile.arm64 << EOL
          FROM scratch
          COPY wheelhouse-arm64-py${{ matrix.python-version }} /wheelhouse
          EOL
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push AMD64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.amd64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }}-amd64
          platforms: linux/amd64
      
      - name: Build and push ARM64 image
        if: steps.arm64-wheels.outputs.found == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.arm64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }}-arm64
          platforms: linux/arm64
          
      - name: Create and push manifest with AMD64 and ARM64
        if: steps.arm64-wheels.outputs.found == 'true'
        run: |
          docker manifest create ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }} \
            ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }}
      
      - name: Create and push manifest with AMD64 only
        if: steps.arm64-wheels.outputs.found == 'false'
        run: |
          docker manifest create ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }} \
            ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }}-amd64
          docker manifest push ghcr.io/${{ github.repository_owner }}/misaki-deps:${{ github.event.inputs.version }}-py${{ matrix.python-version }}