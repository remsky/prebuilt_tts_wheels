name: Build Misaki Multi-Platform Wheels

on:
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: 'Version of Misaki to build'
        required: true
        default: '0.9.4'

# Add permissions needed to create releases
permissions:
  contents: write

jobs:
  build_amd64_wheels:
    name: Build AMD64 Wheels
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl git gnupg lsb-release wget cmake
          cmake --version
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          python -m pip install --upgrade pip setuptools wheel maturin

      - name: Build wheel
        env:
          CMAKE_POLICY_VERSION_MINIMUM: 3.5
        run: |
          mkdir -p wheelhouse
          # Build pyopenjtalk first to handle CMake policy issue
          pip wheel --wheel-dir wheelhouse pyopenjtalk==0.4.0 || echo "Pyopenjtalk wheel build failed, will try with full misaki install"
          # Build underthesea-core with maturin explicitly
          pip wheel --wheel-dir wheelhouse underthesea-core==1.0.4 || echo "underthesea-core wheel build failed, will try with full misaki install"
          # Build the full package with all extras
          pip wheel --wheel-dir wheelhouse "misaki[en,ja,ko,zh,vi]==${{ github.event.inputs.version }}"

      - name: Upload AMD64 Wheels
        uses: actions/upload-artifact@v4
        with:
          name: misaki-wheels-amd64-py${{ matrix.python-version }}
          path: wheelhouse/*.whl

  build_arm64_wheels:
    name: Build ARM64 Wheels
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set environment variables
        run: |
          echo "Setting required environment variables"
          # This explicitly sets PACKAGE_VERSION in the GitHub environment
          echo "PACKAGE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
      
      - name: Debug environment
        run: |
          echo "Debugging environment variables:"
          echo "github.event.inputs.version: ${{ github.event.inputs.version }}"
          # Use env directly because the variable should now be available
          echo "PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}"
          # List all environment variables (without grep which can fail)
          echo "All environment variables:"
          printenv

      - name: Build ARM64 wheel in Docker
        # Use the environment variable that was properly set
        run: |
          # Print Docker version for debugging
          docker version
          
          mkdir -p wheelhouse
          echo "Checking if wheelhouse directory exists before build:"
          ls -la ./
          
          # Build the Docker image
          docker buildx build --platform linux/arm64 \
            --build-arg PYTHON_VERSION=${{ matrix.python-version }} \
            --build-arg PACKAGE_VERSION=${{ env.PACKAGE_VERSION }} \
            -f .github/workflows/misaki-build.Dockerfile \
            --load \
            -t misaki-builder .
          
          # Test volume mounting with a simple file
          docker run --rm \
            -v $(pwd)/wheelhouse:/wheelhouse \
            misaki-builder \
            /bin/bash -c "echo 'Test file' > /wheelhouse/test.txt && ls -la /wheelhouse"
            
          echo "Checking if test file was created:"
          ls -la ./wheelhouse/
          
          # Run the actual build with explicit permissions
          docker run --rm \
            -v "$(pwd)/wheelhouse:/wheelhouse:rw" \
            -e PACKAGE_VERSION=${{ env.PACKAGE_VERSION }} \
            misaki-builder
          
          # Fix permissions on wheelhouse directory
          sudo chown -R $(id -u):$(id -g) ./wheelhouse
          
          echo "Contents of wheelhouse after build:"
          find ./wheelhouse -type f | sort

      - name: Upload ARM64 Wheels
        uses: actions/upload-artifact@v4
        with:
          name: misaki-wheels-arm64-py${{ matrix.python-version }}
          path: wheelhouse/*.whl

  create_release:
    name: Create GitHub Release
    needs: [build_amd64_wheels, build_arm64_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: ls -R artifacts

      - name: Prepare release assets
        run: |
          mkdir release_assets
          cp -f artifacts/misaki-wheels-*/*.whl release_assets/ || true
          echo "--- Contents of release_assets ---"
          ls -l release_assets
          echo "----------------------------------"

      - name: Create Release and Upload Wheels
        uses: softprops/action-gh-release@v2
        with:
          tag_name: misaki-v${{ github.event.inputs.version }}
          name: Misaki v${{ github.event.inputs.version }} Multi-Platform Wheels
          files: release_assets/*.whl
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
